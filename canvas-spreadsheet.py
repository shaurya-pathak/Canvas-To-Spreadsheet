# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CLX67G5Gr-A4bqdaukju9pI0GeDC-tya
"""

import requests
import json
import pandas as pd
from datetime import datetime, timedelta

TOKEN = str(input())

url = "https://ucr.instructure.com:443/api/v1/courses?enrollment_type=student&enrollment_state=active&exclude_blueprint_courses=false"
headers = { "Authorization": f"Bearer {TOKEN}" }

response = requests.get(url, headers=headers)

if response.status_code == 200:
    # request was successful
    data = response.json()
    # do something with the data
else:
    # request was not successful
    print("Something went wrong")

course_ids = []
course_names = []
for course in data:
  course_ids.append(course['id'])
  course_names.append(course['name'])

class Assignment:
    def __init__(self, course, name, due_date, time, dt):
        self.course = course
        self.name = name
        self.due_date = due_date
        self.time = time
        self.dt = dt

Assignments = []
count = 0
for id in course_ids:
  course_url = f'https://ucr.instructure.com:443/api/v1/courses/{id}/assignments?order_by=due_at'
  c_response = requests.get(course_url, headers=headers)
  if c_response.status_code == 200:
      # request was successful
      c_data = c_response.json()
      # do something with the data
  else:
      # request was not successful
      print("Something went wrong")
  for i in range(len(c_data)):
    assignment = c_data[i]
    full_date = ""
    am_pm_time = ""
    date_str = ""
    try:
      date_str = assignment['due_at']
      dt = datetime.fromisoformat(date_str.replace('Z', '+00:00')) - timedelta(hours=7)
      day_name = dt.strftime("%A")
      date = dt.strftime("%m/%d/%Y")
      full_date = f"{day_name}, {date}"
      am_pm_time = dt.strftime("%I:%M %p")
    except:
      print("no date")
    name = assignment['name']
    assi = Assignment(course_names[count], name, full_date, am_pm_time, date_str)
    Assignments.append(assi)
  count += 1

len(Assignments)

vars(Assignments[37])

df = pd.DataFrame(columns=['Course Name', 'Assignment Name', 'Date', 'Time'])

# iterate over the instances of the class
for obj in Assignments:
    # add a new row to the dataframe with the variables of the current instance
    df = df.append({'Course Name': obj.course, 'Assignment Name': obj.name, 'Date': obj.due_date, 'Time': obj.time}, ignore_index=True)

print(df)

df.to_csv('data.csv', index=False)

